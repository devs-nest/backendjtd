Node.js: Fundamentals II
    The Composition of Node.js:

    The Core: V8 Engine
    The central and the most important part of Node.js JavaScript platform is
    this V8 engine. This is developed by Google.
        Engines:
        Mozilla:- SpiderMonkey JavaScript engine
        Apple:- JavaScriptCore or Nitro
        Google:- V8 engine
        Microsoft:- V8 engine

    Node.js uses Google's V8 engine.
    mainly developed in Denmark and in collaboration with Aarhus University.
    It was developed or written in C++.
    Runs on Windows, macOS and Linux operating systems etc.
    x64, IA-32, or ARM processors. 
    V8 can be embedded into any C++ application.

    What are the Components of V8 engine?

    Ignition:-
     V8 and other modern JavaScript engines get their speed via Just-in-Time(JIT)
     compilation of the source code or script, which converts the source to native
     machine code.

     With the help of new fast interpreter Ignition, the V8 engine compiles the JavaScript
     functions to a smaller or concise bytecode. 
     They were able to reduce the generated byte code by 50% to 25% of bytecode generated
     by JIT compilation proces.
     And the generation of bytecode by the execution of ignition happens near to the 
     speed of baseline interpreter.
    
    TurboFan:-
    It is the compiler created by v8 team to replace or overcome the shortcomings
    of CrankShaft compiler.
    It is an optimization compiler by V8 team.

    Sparkplug:-
    It is a Fast non-optimizing compiler of V8.
    It is so fast, that it can compile anything any number of times at execution
    time.
    - The functions it compiles has already been compiled to bytecode.
        so it doesn't need to check for variables and function boundaries.
    - It doesn't converts the bytecode it received from interpreter to
        any intermediate representation

        Sparkplug compiler directly geneates the machine code for the received
        bytecode.



    At what level the optimizations are done by V8?

    Memory Model:-
        Tagged pointers - 
            All objects are 4 byte aligned in memory.
            Which means 1byte = 8 bits
                        4byte = 8 * 4 = 32 bits
            V8 uses 2 bits to identify a pointer.
            If last two bits is having a value of 01 then it is a pointer.
            If it is having a value of 0 then it is a normal number.
        
        The identification or measure that allow interger values to be distinguished
        very quickly from memory references, whcih provides an exttemely significant
        performance advantage.
    
    Accessing Properties:-

        V8 engine uses a concept of hidden class to optimize the access of 
        object properties at runtime.

        class Person {
            constructor(firstname, lastname){
                this.firstname = firstname;
                this.lastname = lastname;
            }
        }

        const subodhsant = new Person("Subodh", "Sant");


        
            







